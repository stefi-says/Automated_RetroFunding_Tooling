import React from 'react';
import { ConnectionLineType, ConnectionMode, PanOnScrollMode, SelectionMode } from '@reactflow/packages/core/src/types';
import type { EdgeTypes, NodeOrigin, NodeTypes, Viewport } from '@reactflow/packages/core/src/types';
declare const ReactFlow: React.ForwardRefExoticComponent<Omit<React.HTMLAttributes<HTMLDivElement>, "onError"> & {
    nodes?: import("@reactflow/packages/core/src/types").Node<any, string | undefined>[] | undefined;
    edges?: import("@reactflow/packages/core/src/types").Edge<any>[] | undefined;
    defaultNodes?: import("@reactflow/packages/core/src/types").Node<any, string | undefined>[] | undefined;
    defaultEdges?: import("@reactflow/packages/core/src/types").Edge<any>[] | undefined;
    defaultEdgeOptions?: import("@reactflow/packages/core/src/types").DefaultEdgeOptions | undefined;
    onNodeClick?: import("@reactflow/packages/core/src/types").NodeMouseHandler | undefined;
    onNodeDoubleClick?: import("@reactflow/packages/core/src/types").NodeMouseHandler | undefined;
    onNodeMouseEnter?: import("@reactflow/packages/core/src/types").NodeMouseHandler | undefined;
    onNodeMouseMove?: import("@reactflow/packages/core/src/types").NodeMouseHandler | undefined;
    onNodeMouseLeave?: import("@reactflow/packages/core/src/types").NodeMouseHandler | undefined;
    onNodeContextMenu?: import("@reactflow/packages/core/src/types").NodeMouseHandler | undefined;
    onNodeDragStart?: import("@reactflow/packages/core/src/types").NodeDragHandler | undefined;
    onNodeDrag?: import("@reactflow/packages/core/src/types").NodeDragHandler | undefined;
    onNodeDragStop?: import("@reactflow/packages/core/src/types").NodeDragHandler | undefined;
    onEdgeClick?: ((event: React.MouseEvent<Element, MouseEvent>, node: import("@reactflow/packages/core/src/types").Edge<any>) => void) | undefined;
    onEdgeUpdate?: import("@reactflow/packages/core/src/types").OnEdgeUpdateFunc<any> | undefined;
    onEdgeUpdateStart?: ((event: React.MouseEvent<Element, MouseEvent>, edge: import("@reactflow/packages/core/src/types").Edge<any>, handleType: import("@reactflow/packages/core/src/types").HandleType) => void) | undefined;
    onEdgeUpdateEnd?: ((event: MouseEvent | TouchEvent, edge: import("@reactflow/packages/core/src/types").Edge<any>, handleType: import("@reactflow/packages/core/src/types").HandleType) => void) | undefined;
    onReconnect?: import("@reactflow/packages/core/src/types").OnEdgeUpdateFunc<any> | undefined;
    onReconnectStart?: ((event: React.MouseEvent<Element, MouseEvent>, edge: import("@reactflow/packages/core/src/types").Edge<any>, handleType: import("@reactflow/packages/core/src/types").HandleType) => void) | undefined;
    onReconnectEnd?: ((event: MouseEvent | TouchEvent, edge: import("@reactflow/packages/core/src/types").Edge<any>, handleType: import("@reactflow/packages/core/src/types").HandleType) => void) | undefined;
    onEdgeContextMenu?: import("@reactflow/packages/core/src/types").EdgeMouseHandler | undefined;
    onEdgeMouseEnter?: import("@reactflow/packages/core/src/types").EdgeMouseHandler | undefined;
    onEdgeMouseMove?: import("@reactflow/packages/core/src/types").EdgeMouseHandler | undefined;
    onEdgeMouseLeave?: import("@reactflow/packages/core/src/types").EdgeMouseHandler | undefined;
    onEdgeDoubleClick?: import("@reactflow/packages/core/src/types").EdgeMouseHandler | undefined;
    onNodesChange?: import("@reactflow/packages/core/src/types").OnNodesChange | undefined;
    onEdgesChange?: import("@reactflow/packages/core/src/types").OnEdgesChange | undefined;
    onNodesDelete?: import("@reactflow/packages/core/src/types").OnNodesDelete | undefined;
    onEdgesDelete?: import("@reactflow/packages/core/src/types").OnEdgesDelete | undefined;
    onSelectionDragStart?: import("@reactflow/packages/core/src/types").SelectionDragHandler | undefined;
    onSelectionDrag?: import("@reactflow/packages/core/src/types").SelectionDragHandler | undefined;
    onSelectionDragStop?: import("@reactflow/packages/core/src/types").SelectionDragHandler | undefined;
    onSelectionStart?: ((event: React.MouseEvent<Element, MouseEvent>) => void) | undefined;
    onSelectionEnd?: ((event: React.MouseEvent<Element, MouseEvent>) => void) | undefined;
    onSelectionContextMenu?: ((event: React.MouseEvent<Element, MouseEvent>, nodes: import("@reactflow/packages/core/src/types").Node<any, string | undefined>[]) => void) | undefined;
    onConnect?: import("@reactflow/packages/core/src/types").OnConnect | undefined;
    onConnectStart?: import("@reactflow/packages/core/src/types").OnConnectStart | undefined;
    onConnectEnd?: import("@reactflow/packages/core/src/types").OnConnectEnd | undefined;
    onClickConnectStart?: import("@reactflow/packages/core/src/types").OnConnectStart | undefined;
    onClickConnectEnd?: import("@reactflow/packages/core/src/types").OnConnectEnd | undefined;
    onInit?: import("@reactflow/packages/core/src/types").OnInit<any, any> | undefined;
    onMove?: import("@reactflow/packages/core/src/types").OnMove | undefined;
    onMoveStart?: import("@reactflow/packages/core/src/types").OnMove | undefined;
    onMoveEnd?: import("@reactflow/packages/core/src/types").OnMove | undefined;
    onSelectionChange?: import("@reactflow/packages/core/src/types").OnSelectionChangeFunc | undefined;
    onPaneScroll?: ((event?: React.WheelEvent<Element> | undefined) => void) | undefined;
    onPaneClick?: ((event: React.MouseEvent<Element, MouseEvent>) => void) | undefined;
    onPaneContextMenu?: ((event: React.MouseEvent<Element, MouseEvent>) => void) | undefined;
    onPaneMouseEnter?: ((event: React.MouseEvent<Element, MouseEvent>) => void) | undefined;
    onPaneMouseMove?: ((event: React.MouseEvent<Element, MouseEvent>) => void) | undefined;
    onPaneMouseLeave?: ((event: React.MouseEvent<Element, MouseEvent>) => void) | undefined;
    nodeTypes?: NodeTypes | undefined;
    edgeTypes?: EdgeTypes | undefined;
    connectionLineType?: ConnectionLineType | undefined;
    connectionLineStyle?: React.CSSProperties | undefined;
    connectionLineComponent?: import("@reactflow/packages/core/src/types").ConnectionLineComponent | undefined;
    connectionLineContainerStyle?: React.CSSProperties | undefined;
    connectionMode?: ConnectionMode | undefined;
    deleteKeyCode?: import("@reactflow/packages/core/src/types").KeyCode | null | undefined;
    selectionKeyCode?: import("@reactflow/packages/core/src/types").KeyCode | null | undefined;
    selectionOnDrag?: boolean | undefined;
    selectionMode?: SelectionMode | undefined;
    panActivationKeyCode?: import("@reactflow/packages/core/src/types").KeyCode | null | undefined;
    multiSelectionKeyCode?: import("@reactflow/packages/core/src/types").KeyCode | null | undefined;
    zoomActivationKeyCode?: import("@reactflow/packages/core/src/types").KeyCode | null | undefined;
    snapToGrid?: boolean | undefined;
    snapGrid?: [number, number] | undefined;
    onlyRenderVisibleElements?: boolean | undefined;
    nodesDraggable?: boolean | undefined;
    nodesConnectable?: boolean | undefined;
    nodesFocusable?: boolean | undefined;
    nodeOrigin?: NodeOrigin | undefined;
    edgesFocusable?: boolean | undefined;
    edgesUpdatable?: boolean | undefined;
    initNodeOrigin?: NodeOrigin | undefined;
    elementsSelectable?: boolean | undefined;
    selectNodesOnDrag?: boolean | undefined;
    panOnDrag?: boolean | number[] | undefined;
    minZoom?: number | undefined;
    maxZoom?: number | undefined;
    defaultViewport?: Viewport | undefined;
    translateExtent?: import("@reactflow/packages/core/src/types").CoordinateExtent | undefined;
    preventScrolling?: boolean | undefined;
    nodeExtent?: import("@reactflow/packages/core/src/types").CoordinateExtent | undefined;
    defaultMarkerColor?: string | undefined;
    zoomOnScroll?: boolean | undefined;
    zoomOnPinch?: boolean | undefined;
    panOnScroll?: boolean | undefined;
    panOnScrollSpeed?: number | undefined;
    panOnScrollMode?: PanOnScrollMode | undefined;
    zoomOnDoubleClick?: boolean | undefined;
    edgeUpdaterRadius?: number | undefined;
    reconnectRadius?: number | undefined;
    noDragClassName?: string | undefined;
    noWheelClassName?: string | undefined;
    noPanClassName?: string | undefined;
    fitView?: boolean | undefined;
    fitViewOptions?: import("@reactflow/packages/core/src/types").FitViewOptions | undefined;
    connectOnClick?: boolean | undefined;
    attributionPosition?: import("@reactflow/packages/core/src/types").PanelPosition | undefined;
    proOptions?: import("@reactflow/packages/core/src/types").ProOptions | undefined;
    elevateNodesOnSelect?: boolean | undefined;
    elevateEdgesOnSelect?: boolean | undefined;
    disableKeyboardA11y?: boolean | undefined;
    autoPanOnNodeDrag?: boolean | undefined;
    autoPanOnConnect?: boolean | undefined;
    connectionRadius?: number | undefined;
    onError?: import("@reactflow/packages/core/src/types").OnError | undefined;
    isValidConnection?: import("@reactflow/packages/core/src/components/Handle/utils").ValidConnectionFunc | undefined;
    nodeDragThreshold?: number | undefined;
} & React.RefAttributes<HTMLDivElement>>;
export default ReactFlow;
//# sourceMappingURL=index.d.ts.map